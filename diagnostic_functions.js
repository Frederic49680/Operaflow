const { createClient } = require('@supabase/supabase-js')

const supabaseUrl = 'https://rrmvejpwbkwlmyjhnxaz.supabase.co'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJybXZlanB3Ymt3bG15amhueGF6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjA3OTM1NDEsImV4cCI6MjA3NjM2OTU0MX0.8TVMKeCBR3yg2iKlqypOD7zPqIPYYMi2xwHubNPF_Ow'

const supabase = createClient(supabaseUrl, supabaseKey)

async function diagnosticFunctions() {
  console.log('üîç Diagnostic des fonctions et triggers de la base de donn√©es...')
  
  try {
    // 1. V√©rifier l'√©tat de la table ressources
    console.log('\n1. üìã V√©rification de la table ressources...')
    const { data: ressources, error: ressourcesError } = await supabase
      .from('ressources')
      .select('*')
      .limit(5)
    
    if (ressourcesError) {
      console.log('‚ùå Erreur lors de la lecture des ressources:', ressourcesError.message)
    } else {
      console.log('‚úÖ Ressources lues:', ressources?.length || 0, 'enregistrements')
      if (ressources && ressources.length > 0) {
        console.log('üìä Premier enregistrement:', {
          id: ressources[0].id,
          nom: ressources[0].nom,
          prenom: ressources[0].prenom,
          role_principal: ressources[0].role_principal
        })
      }
    }

    // 2. V√©rifier l'√©tat de la table roles
    console.log('\n2. üé≠ V√©rification de la table roles...')
    const { data: roles, error: rolesError } = await supabase
      .from('roles')
      .select('*')
      .order('seniority_rank', { ascending: true })
    
    if (rolesError) {
      console.log('‚ùå Erreur lors de la lecture des r√¥les:', rolesError.message)
    } else {
      console.log('‚úÖ R√¥les lus:', roles?.length || 0, 'r√¥les')
      if (roles && roles.length > 0) {
        console.log('üìä Premiers r√¥les:')
        roles.slice(0, 5).forEach(role => {
          console.log(`  - ${role.code}: ${role.label} (rang: ${role.seniority_rank})`)
        })
      }
    }

    // 3. V√©rifier l'√©tat de la table user_roles
    console.log('\n3. üîó V√©rification de la table user_roles...')
    const { data: userRoles, error: userRolesError } = await supabase
      .from('user_roles')
      .select(`
        *,
        roles(code, label),
        app_users(email)
      `)
      .limit(5)
    
    if (userRolesError) {
      console.log('‚ùå Erreur lors de la lecture des user_roles:', userRolesError.message)
    } else {
      console.log('‚úÖ User_roles lus:', userRoles?.length || 0, 'associations')
      if (userRoles && userRoles.length > 0) {
        console.log('üìä Premi√®res associations:')
        userRoles.forEach(ur => {
          console.log(`  - ${ur.app_users?.email || 'N/A'} -> ${ur.roles?.label || ur.roles?.code || 'N/A'}`)
        })
      }
    }

    // 4. Test de mise √† jour d'une ressource
    console.log('\n4. üîÑ Test de mise √† jour d\'une ressource...')
    if (ressources && ressources.length > 0) {
      const testRessource = ressources[0]
      console.log(`üìù Test de mise √† jour de la ressource: ${testRessource.nom} ${testRessource.prenom}`)
      
      const { error: updateError } = await supabase
        .from('ressources')
        .update({ 
          role_principal: 'Technicien',
          updated_at: new Date().toISOString()
        })
        .eq('id', testRessource.id)
      
      if (updateError) {
        console.log('‚ùå Erreur lors de la mise √† jour:', updateError.message)
        console.log('üîç Code erreur:', updateError.code)
        console.log('üîç D√©tails:', updateError.details)
        console.log('üîç Hint:', updateError.hint)
      } else {
        console.log('‚úÖ Mise √† jour r√©ussie!')
        
        // V√©rifier la mise √† jour
        const { data: updatedRessource, error: readError } = await supabase
          .from('ressources')
          .select('role_principal, updated_at')
          .eq('id', testRessource.id)
          .single()
        
        if (readError) {
          console.log('‚ùå Erreur lors de la lecture apr√®s mise √† jour:', readError.message)
        } else {
          console.log('‚úÖ V√©rification apr√®s mise √† jour:', updatedRessource)
        }
      }
    }

    // 5. V√©rifier les triggers et fonctions
    console.log('\n5. ‚öôÔ∏è V√©rification des triggers et fonctions...')
    
    // Test de cr√©ation d'un user_role
    console.log('\n6. üîó Test de cr√©ation d\'un user_role...')
    if (roles && roles.length > 0 && ressources && ressources.length > 0) {
      const testRole = roles.find(r => r.code === 'TECH') || roles[0]
      const testRessource = ressources[0]
      
      console.log(`üìù Test de cr√©ation user_role: ${testRessource.nom} -> ${testRole.label}`)
      
      const { data: newUserRole, error: createError } = await supabase
        .from('user_roles')
        .insert({
          user_id: testRessource.id,
          role_id: testRole.id
        })
        .select()
        .single()
      
      if (createError) {
        console.log('‚ùå Erreur lors de la cr√©ation user_role:', createError.message)
        console.log('üîç Code erreur:', createError.code)
      } else {
        console.log('‚úÖ User_role cr√©√© avec succ√®s:', newUserRole.id)
        
        // V√©rifier si le trigger a mis √† jour app_users
        const { data: appUser, error: appUserError } = await supabase
          .from('app_users')
          .select('role')
          .eq('id', testRessource.id)
          .single()
        
        if (appUserError) {
          console.log('‚ö†Ô∏è Pas d\'app_user correspondant (normal si pas de compte)')
        } else {
          console.log('‚úÖ App_user mis √† jour par trigger:', appUser.role)
        }
        
        // Nettoyer
        await supabase.from('user_roles').delete().eq('id', newUserRole.id)
        console.log('üßπ User_role de test supprim√©')
      }
    }

    console.log('\nüéØ Diagnostic termin√©!')
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error)
  }
}

diagnosticFunctions()
