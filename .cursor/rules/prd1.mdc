---
alwaysApply: true
---
üß≠ PRD ‚Äî Gestion des Utilisateurs & Acc√®s (App)
Objectif
G√©rer les comptes applicatifs (distincts des collaborateurs RH) : cr√©ation/invitation, authentification, r√¥les & permissions, contr√¥le d‚Äôacc√®s par page et par composant, audit.
1) Parcours & r√®gles
‚Ä¢	Cr√©ation utilisateur (admin)
o	Saisie : email, pr√©nom, nom, r√¥le(s) initiaux, site(s) de p√©rim√®tre (option).
o	G√©n√©ration MDP provisoire + lien d‚Äôactivation (48h) via SMTP.
o	Hook onUserCreated : provision des defaults (pr√©f√©rences, r√¥les).
‚Ä¢	Premi√®re connexion
o	V√©rif lien encore valide.
o	Forcer changement de mot de passe (politique : min 12, complexit√©, pas 3 derniers).
o	Option : activer 2FA (TOTP) si r√¥le sensible.
‚Ä¢	Connexion courante
o	Sessions s√©curis√©es (JWT/ Supabase session), rotation token, logout partout.
o	Verrouillage apr√®s N √©checs (ex. 5), cooldown + email d‚Äôalerte.
‚Ä¢	R√©initialisation
o	Lien reset (validit√© 1h), journaux d‚Äôaudit.
‚Ä¢	Contr√¥le d‚Äôacc√®s
o	RBAC (r√¥les) + permissions fines (capabilities).
o	Page Access Rules (par route) et Feature Flags / Component Guards (par composant).
o	P√©rim√®tre : filtrage data par site(s) autoris√©s.
2) R√¥les par d√©faut (√©ditables)
‚Ä¢	Admin : tout.
‚Ä¢	Planificateur : Gantt, ad√©quation, lecture RH, √©criture planif.
‚Ä¢	Charg√© d‚ÄôAffaires (CA) : Affaires, lots, reporting finance (lecture), claims (validation).
‚Ä¢	Responsable de site : vues site, remont√©es, maintenance (son site).
‚Ä¢	Maintenance : journal soir, batteries.
‚Ä¢	RH : module RH/absences, lecture planif.
‚Ä¢	Direction/PMO : dashboard global (lecture), exports.
On peut cr√©er/√©diter des r√¥les custom via l‚ÄôUI.
3) UI / Pages
‚Ä¢	/admin/users : table utilisateurs (recherche, filtre r√¥le/site, √©tat), actions (inviter, d√©sactiver, reset, forcer 2FA).
‚Ä¢	/admin/roles : CRUD r√¥les, assignation permissions (scopes : pages, actions).
‚Ä¢	/admin/access : matrice Pages √ó R√¥les (lecture/√©criture/aucun) + granularit√© composant (toggles).
‚Ä¢	/profile : pr√©f√©rences, 2FA, mots de passe, cl√©s d‚ÄôAPI (si besoin).
‚Ä¢	Banni√®res d‚Äôacc√®s refus√© + redirection vers pages autoris√©es.
4) Mod√®le de donn√©es (Supabase)
Tables core
‚Ä¢	app_users
id uuid pk, email text unique, prenom text, nom text, active bool default true, email_verified bool,
force_pwd_change bool default true, twofa_enabled bool, sites_scope uuid[], created_at, updated_at
‚Ä¢	roles
id pk, code text unique, label text, system bool, created_at
‚Ä¢	permissions
id pk, code text unique (ex: page.gantt.read, page.gantt.write, comp.claims.validate), label text
‚Ä¢	role_permissions
id pk, role_id fk -> roles, permission_id fk -> permissions unique(role,perm)
‚Ä¢	user_roles
id pk, user_id fk -> app_users, role_id fk -> roles unique(user,role)
‚Ä¢	page_access_rules
id pk, route text (ex: /gantt), role_id fk -> roles, access text check in ('none','read','write'), unique(route,role)
‚Ä¢	component_flags
id pk, component_key text (ex: gantt.financeCard), role_id fk -> roles, enabled bool, unique(component_key,role)
‚Ä¢	user_tokens (activation/reset)
id pk, user_id fk, type text (activation|reset), token_hash text, expires_at timestamptz, used_at timestamptz
‚Ä¢	audit_log
id pk, actor_id uuid, action text, entity text, entity_id uuid, meta jsonb, created_at
Index & RLS
‚Ä¢	Index sur email, FK, route, component_key.
‚Ä¢	RLS :
o	app_users : lecture par Admin ; self-read sur son profil.
o	tables d‚Äôadmin (roles/permissions) : Admin only.
o	page_access_rules/component_flags : lecture par tous (pour guard c√¥t√© client), √©criture Admin.
5) S√©curit√© & politiques
‚Ä¢	Politique MDP (12+, complexit√©, rotation 90j option).
‚Ä¢	2FA optionnel, requis pour Admin/Direction.
‚Ä¢	IP throttling (rate-limit) sur login/reset.
‚Ä¢	Email d‚Äôalerte si connexion depuis nouvelle IP.
‚Ä¢	Logs d‚Äôadmin : toutes les actions critiques dans audit_log.
6) Hooks & int√©grations
‚Ä¢	onUserCreated(user) : provision r√¥les par d√©faut selon domaine email ou invitation.
‚Ä¢	onFirstLogin(user) : forcer changement MDP, proposer 2FA.
‚Ä¢	onRoleChanged(user) : r√©g√©n√©rer cache d‚Äôautorisations.
‚Ä¢	SMTP : envoi invitation, activation 48h, reset 1h, alertes s√©curit√©.
‚Ä¢	Option SSO (phase 2) : Azure AD / Google OAuth ‚Üí mapping groupes ‚Üí r√¥les.
7) Crit√®res d‚Äôacceptation
‚Ä¢	USR-01 Invitation envoie lien 48h + MDP provisoire.
‚Ä¢	USR-02 Premi√®re connexion impose changement MDP.
‚Ä¢	USR-03 RBAC effectif (page-level & component-level).
‚Ä¢	USR-04 P√©rim√®tre site appliqu√© aux vues et aux requ√™tes.
‚Ä¢	USR-05 Reset MDP (1h) + audit.
‚Ä¢	USR-06 Admin peut cr√©er/√©diter r√¥les & permissions.
‚Ä¢	USR-07 ‚ÄúAcc√®s refus√©‚Äù coh√©rent + redirection safe.
‚Ä¢	USR-08 Journalisation des actions d‚Äôadmin.
‚Ä¢	USR-09 Temps d‚Äôaffichage < 2 s sur /admin/users (pagination).
8) Composants frontend
‚Ä¢	UsersTable, UserInviteModal, UserResetButton, RoleEditor, PermissionMatrix,
PageAccessMatrix, ComponentFlagMatrix, TwoFASetup, AuditTable.
9) Notes d‚Äôimpl√© rapide
‚Ä¢	Guards c√¥t√© client : hook useAuth() retour can('page.gantt.write') etc.
‚Ä¢	Guards c√¥t√© serveur : policies RLS + v√©rif permission avant requ√™tes mutatives.
‚Ä¢	Cache des permissions (par user) en m√©moire + invalidation √† chaque MAJ r√¥le.
‚Ä¢	Feature flags par composant = rendu conditionnel + fallback UX propre.

