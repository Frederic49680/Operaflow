---
alwaysApply: true
---
üß≠ PRD ‚Äî Base Affaires (socle m√©tier) + Lien T√¢ches Gantt
Version : 1.1
But : Le charg√© d‚Äôaffaire saisit l‚Äôaffaire (site, activit√©, comp√©tence, n¬∞ de commande, d√©coupage financier). Le planificateur lie ensuite les t√¢ches Gantt √† ce d√©coupage pour que l‚Äôatterrissage financier suive les avancements r√©els (dates, %).
________________________________________
1) Objet & r√¥les
‚Ä¢	Charg√© d‚ÄôAffaires (CA) : cr√©e l‚Äôaffaire + d√©coupage financier par lots/phases (budgets, co√ªts pr√©vus, marge).
‚Ä¢	Planificateur : cr√©e/organise les t√¢ches Gantt et les relie aux lots de l‚Äôaffaire.
‚Ä¢	Calcul auto : l‚Äôatterrissage (par lot et global) se met √† jour selon les % d‚Äôavancement des t√¢ches li√©es, leurs dates r√©elles et consomm√©s.
________________________________________
2) Donn√©es de l‚Äôaffaire (rappel synth√©tique)
‚Ä¢	Site, Responsable d‚Äôaffaire (obligatoires)
‚Ä¢	Activit√© / Comp√©tence principale
‚Ä¢	Client, Num√©ro de commande
‚Ä¢	Type contrat (Forfait / R√©gie / Autre), Montant total HT
‚Ä¢	D√©coupage financier (‚â• 1 lot) : budget_ht, co√ªt_estime, marge_prev, RAFA (reste √† faire), etc.
‚Ä¢	Statuts : Brouillon ‚Üí Soumise ‚Üí Valid√©e (transmise au planif) ‚Üí Cl√¥tur√©e
________________________________________
3) Lien ‚ÄúD√©coupage financier ‚Üî T√¢ches Gantt‚Äù
3.1 Principe
‚Ä¢	Chaque t√¢che Gantt peut √™tre rattach√©e √† un (et un seul) lot d‚Äôune affaire.
‚Ä¢	Un lot peut agr√©ger plusieurs t√¢ches.
‚Ä¢	Les % d‚Äôavancement, dates r√©elles, heures consomm√©es et/ou co√ªts remontent des t√¢ches vers le lot ‚Üí puis du lot vers l‚Äôaffaire.
3.2 R√®gles de calcul (lot)
‚Ä¢	Avancement lot (%) = moyenne pond√©r√©e des t√¢ches li√©es
o	Pond√©ration par budget_lot ou effort (heures planifi√©es) ‚Üí param√®tre global ponderation = "heures" | "budget".
‚Ä¢	Montant consomm√© lot =
o	en Forfait : budget_lot * avancement_lot% (m√©thode √† l‚Äôavancement)
o	en R√©gie : Œ£ (heures_t√¢che_consum√©es * taux horaire), sinon fallback √† l‚Äôavancement (si pas d‚Äôheures)
‚Ä¢	Reste √† faire (RAF) = budget_lot - montant_consomm√©_lot
‚Ä¢	Atterrissage lot = montant_consomm√©_lot + RAF (r√©vis√©)
o	par d√©faut atterrissage = budget_lot si pas de d√©rive d√©tect√©e
o	si co√ªts r√©els disponibles (temps, achats) ‚Üí on ajuste : atterrissage = co√ªts_r√©els + RAF
‚Ä¢	Dates lot (r√©elles) :
o	d√©but r√©elle = min(date_d√©but_r√©elle des t√¢ches li√©es)
o	fin r√©elle = max(date_fin_r√©elle des t√¢ches li√©es)
3.3 R√®gles de calcul (affaire)
‚Ä¢	Avancement affaire = moyenne pond√©r√©e des lots (m√™me r√®gle de pond√©ration que ci-dessus).
‚Ä¢	Atterrissage affaire = somme des atterrissages lots.
‚Ä¢	Dates r√©elles affaire : min d√©but r√©elle des lots / max fin r√©elle des lots.
________________________________________
4) Mod√®le de donn√©es (ajouts)
Table affaires (identique √† V1.0, rappel utile)
‚Ä¢	‚Ä¶ code_affaire, site_id, responsable_id, competence_principale, num_commande, type_contrat, montant_total_ht, statut, date_debut, date_fin_prevue, date_fin_reelle, ‚Ä¶
Table affaires_lots
Champ	Type	Notes
id	uuid	
affaire_id	uuid	FK ‚Üí affaires
libelle_lot	text	
budget_ht	numeric	
cout_estime	numeric	
marge_prevue	numeric	
ponderation	text	"heures" | "budget" (h√©rite du global par d√©faut)
avancement_pct	numeric	calcul√© depuis t√¢ches
montant_consomme	numeric	calcul√©
reste_a_faire	numeric	calcul√©
atterrissage	numeric	calcul√©
date_debut_reelle	date	calcul√©
date_fin_reelle	date	calcul√©
date_maj	timestamp	
Table planning_taches (c√¥t√© Gantt)
Champ	Type	Notes
id	uuid	
affaire_id	uuid	FK ‚Üí affaires
lot_id	uuid	FK ‚Üí affaires_lots (nullable tant que non li√©)
libelle_tache	text	
date_debut_plan	date	
date_fin_plan	date	
date_debut_reelle	date	
date_fin_reelle	date	
effort_plan_h	numeric	heures pr√©vues
effort_reel_h	numeric	heures consomm√©es
avancement_pct	numeric	0..100
statut	text	Non lanc√© / En cours / Termin√© / Bloqu√© / Report√©
competence	text	(si diff√©rent de l‚Äôaffaire)
NB : si tu as d√©j√† une table ‚Äúactivites‚Äù, on peut la r√©utiliser et simplement ajouter lot_id.
________________________________________
5) M√©canisme de synchro & agr√©gation
‚Ä¢	Trigger Supabase / Function planifi√©e (ex. toutes les 15 min) :
1.	Aggr√©ger les t√¢ches par lot_id ‚Üí mettre √† jour affaires_lots (avancement, consomm√©s, dates r√©elles).
2.	Aggr√©ger les lots par affaire_id ‚Üí mettre √† jour affaires (avancement global, dates, atterrissage).
‚Ä¢	Temps r√©el (option) : via Realtime, recalcul imm√©diat √† chaque mise √† jour de t√¢che.
Formules de base (pseudo)
avancement_lot = SUM(t.avancement_pct * poids_t) / SUM(poids_t)
o√π poids_t = (ponderation=="heures" ? t.effort_plan_h : budget_lot/nb_taches_du_lot)

montant_consomme_lot (forfait) = budget_lot * avancement_lot
montant_consomme_lot (r√©gie)   = SUM(t.effort_reel_h * taux_horaire)

reste_a_faire_lot = MAX(budget_lot - montant_consomme_lot, 0)
atterrissage_lot = montant_consomme_lot + reste_a_faire_lot (ou co√ªts_r√©els + RAF si dispo)
________________________________________
6) UX / workflow
1.	CA cr√©e l‚Äôaffaire (+ site, responsabilit√©, n¬∞ commande, lot(s) financiers) ‚Üí statut Soumise.
2.	Validation (Admin/Planif) ‚Üí statut Valid√©e ‚Üí visible dans Gantt.
3.	Planificateur cr√©e les t√¢ches et les rattache aux lots (champ lot_id).
4.	Les t√¢ches avancent (dates r√©elles, % et heures).
5.	Synchro met √† jour lots puis affaire (avancement, consomm√©, RAF, atterrissage).
6.	Cl√¥ture : quand toutes les t√¢ches d‚Äôun lot sont Termin√©es, le lot passe 100 %, puis l‚Äôaffaire se cl√¥t quand tous les lots = 100 %.
________________________________________
7) R√®gles m√©tier & garde-fous
‚Ä¢	Chaque t√¢che doit avoir affaire_id et id√©alement lot_id.
‚Ä¢	T√¢ches sans lot : visibles mais exclues des calculs financiers ‚Üí badge ‚Äú√† ventiler‚Äù.
‚Ä¢	Dates r√©elles priment sur planifi√©es pour les agr√©gations.
‚Ä¢	Pour forfait : si effort_reel_h indisponible ‚Üí m√©thode √† l‚Äôavancement (par %).
‚Ä¢	Pour r√©gie : si pas d‚Äôheures ‚Üí fallback √† l‚Äôavancement (warning).
‚Ä¢	Changement de pond√©ration (heures/budget) = recalcul complet au prochain cycle.
‚Ä¢	Suppression physique interdite (archivage). Historique dans historique_actions.
________________________________________
8) Crit√®res d‚Äôacceptation (cl√©s)
‚Ä¢	Liaison t√¢che ‚Üî lot op√©rationnelle (UI + DB).
‚Ä¢	Avancement lot = agr√©gation des t√¢ches li√©es (pond√©ration conforme).
‚Ä¢	Atterrissage lot = consomm√© + RAF (selon type contrat).
‚Ä¢	Atterrissage affaire = somme des lots.
‚Ä¢	Dates r√©elles lot/affaire = min/max des t√¢ches li√©es.
‚Ä¢	T√¢ches ‚Äúnon ventil√©es‚Äù (sans lot) exclues des calculs et signal√©es.
‚Ä¢	Triggers / Functions de synchro fiables et idempotentes.
‚Ä¢	Import/Export Excel conserve num√©ro de commande et lots.
‚Ä¢	UI fluide : liste des lots dans la modale de la t√¢che (s√©lecteur rapide).
________________________________________
9) UI ‚Äì composants utiles
‚Ä¢	AffairesTable, AffaireFormModal (avec Num√©ro de commande).
‚Ä¢	LotsFinanceTable (cr√©ation/√©dition des lots).
‚Ä¢	Dans la Gantt/Activit√© : TaskFinanceLink (select lot_id + badge ‚Äúnon ventil√©e‚Äù).
‚Ä¢	FinanceSummaryCard (par affaire : Budget / Consomm√© / RAF / Atterrissage).
‚Ä¢	AtterrissageDrilldown (par lot ‚Üí liste t√¢ches li√©es, % et dates).
‚Ä¢	SyncStatusChip (OK / √† recalculer).
________________________________________
10) Exemple chiffr√© (rapide)
‚Ä¢	Affaire A ‚Äì 2 lots :
o	Lot 1 (Budget 100k) : 2 t√¢ches (60h, 40h), avancements 50 % et 20 % ‚Üí avancement pond√©r√© heures = 38 % ‚Üí consomm√© forfait = 38k, RAF 62k, atterrissage 100k.
o	Lot 2 (Budget 50k) : 1 t√¢che 100h, avancement 10 % ‚Üí consomm√© 5k, RAF 45k, atterrissage 50k.
‚Ä¢	Affaire A ‚Äì Atterrissage global = 150k (par d√©faut). Si heures r√©elles/co√ªts d√©rapent, l‚Äôatterrissage √©volue.

